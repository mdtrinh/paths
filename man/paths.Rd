% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paths-package.R, R/paths.R
\docType{package}
\name{paths}
\alias{paths}
\alias{paths-package}
\alias{summary.paths}
\alias{print.summary.paths}
\title{paths: A package for causal paths analysis.}
\usage{
paths(formulas = NULL, models = NULL, models_args = NULL,
  sims = 1000, treat = NULL, outcome = NULL, conditional = TRUE,
  ps = FALSE, ps_formula = update(formulas[[1]], paste(treat, "~ . -",
  treat)), ps_model = "glm", ps_model_args = list(binomial(link =
  "logit")), conf.level = 0.95, long = TRUE, data = NULL, ...)
}
\arguments{
\item{formulas}{a list of \eqn{K+1} formulas where \eqn{K} is the number
of mediators in the causal chain.
\itemize{
  \item The first formula must describe a fully-specified
  model of the outcome conditional on all model variables
  \\ i.e. \eqn{Y ~ X + A + M_1 + \ldots + M_K}
  \item The second formula must describe a model of the
  outcome conditional on all model variables
  except the last mediator(s) in the causal chain
  \\ i.e. \eqn{Y ~ X + A + M_1 + \ldots + M_{K-1}}
  \item Each subsequent formula must describe a model of the
  outcome conditional on all model variables
  except the two last mediator(s) in the causal chain
  \\ i.e. \eqn{Y ~ X + A + M_1 + \ldots + M_{K-2}},
  \eqn{Y ~ X + A + M_1 + \ldots + M_{K-3}}, etc.
  \item The last formula must describe a model of the
  outcome conditional on all model variables
  except any of the mediator.
  \\ i.e. \eqn{Y ~ X + A},
}
The outcome variable \eqn{Y} can belong to any type that is supported
by \code{lm}, \code{glm}, \code{BART::wbart}, \code{BART::pbart},
or \code{BART::lbart}, but the model type must be correctly specified
in the \code{models} and \code{models_args} arguments

The treatment variable \eqn{A} must be a binary variable.

The names of the mediator variables and covariates are automatically
extracted from the formulas.}

\item{models}{a list or a vector of \eqn{K+1} strings specifing
the method to be used to fit each of the models. Supported methods
are \code{lm}, \code{glm}, \code{wbart}, \code{pbart}, and \code{lbart}
(the last three methods require the \code{BART} package.)}

\item{models_args}{a list of \eqn{K+1}, each containing the arguments
to be passed to each of the models' fitting methods. For the \code{glm}
method, the arguments can be used to specify model family.}

\item{sims}{number of Bootstrap draws for estimating uncertainty}

\item{treat}{a character string indicating the name of the treatment
variable used in the models. Only binary treatment is currently supported.}

\item{outcome}{a character string indicating the name of the treatment
variable used in the models. The outcome variable must be
compatible with the models specified by \code{models}
and \code{models_args}.}

\item{conditional}{a logical value. If \code{FALSE}, the total treatment
effect will be estimated unconditionally as a difference of means
between the treatment and control groups. This is advised for
data obtained from a randomized experiment. If \code{TRUE}, the
total treatment effect will be estimated conditionally on the covariates
specified in \code{formulas}. This is advised for data obtained
from an observational study.}

\item{ps}{a logical value. If \code{FALSE}, the path-specific causal
effects will be estimated using a pure imputation approach. If \code{TRUE},
the imputation-based weighting estimator will be used instead.}

\item{ps_formula}{a formula with the treatment variable as the response
variable. This formula must describe the propensity score model used to
estimate propensity scores and calculates imputation weights.}

\item{ps_model}{a character string specifing
the method to be used to fit the propensity score model. Supported methods
are \code{lm}, \code{glm}, \code{wbart}, \code{pbart}, and \code{lbart}}

\item{ps_model_args}{a list of arguments to be passed to the propensity
score model's fitting method. For the \code{glm} method, the arguments
can be used to specify model family.}

\item{conf.level}{of the returned two-sided confidence intervals. Default is
to return the 2.5 and 97.5 percentiles of the bootstraped effect estimates.}

\item{long}{a logical value. If \code{TRUE}, the output will contain the
entire set of bootstrap draws of the effect estimates.}

\item{data}{a data frame, list or environment containing the variables
in the models. Incomplete cases will be automatically dropped.}

\item{...}{additional arguments to be passed to \code{boot::boot},
e.g. \code{parallel} and \code{ncpus}}
}
\value{
An object of class "paths"
}
\description{
The \code{paths} package provides a framework for
tracing causal paths in the presence of multiple
causally independent mediators. It implements the
identification and estimation strategies outlined
in Xiang & Yamamoto (2020), and conducts statistical
inference using non-parametric bootstrap.
}
\examples{

data(tatar)

x <- c("kulak", "prosoviet_pre", "religiosity_pre",
       "house_pre", "land_pre", "orchard_pre",
       "animals_pre", "carriage_pre", "otherprop_pre")
a <- "violence"
l <- c("trust_g1", "victim_g1", "fear_g1")
m <- c("trust_g2", "victim_g2", "fear_g2")
n <- c("trust_g3", "victim_g3", "fear_g3")
y <- "annex"

# outcome models

formula_y <- as.formula(paste(y, " ~ ", paste(c(x, a, l, m, n), collapse= "+")))
formula_m3 <- as.formula(paste(y, " ~ ", paste(c(x, a, l, m), collapse= "+")))
formula_m2 <- as.formula(paste(y, " ~ ", paste(c(x, a, l), collapse= "+")))
formula_m1 <- as.formula(paste(y, " ~ ", paste(c(x, a), collapse= "+")))
formula_a <- as.formula(paste(a, " ~ ", paste(c(x), collapse= "+")))


## Model as in Yamamoto & Zhou (2020)

path_out_annex <- paths(formulas = list(formula_y, formula_m3, formula_m2, formula_m1),
                        models = c("pbart", "pbart", "pbart", "pbart"),
                        models_args = list(NULL,
                                           NULL,
                                           NULL,
                                           NULL),
                        conditional = TRUE,
                        ps = TRUE,
                        ps_formula = formula_a,
                        ps_model = "glm",
                        ps_model_args = list(family = binomial(link = "logit")),
                        sims = 10,
                        treat = "violence",
                        outcome = "annex",
                        data = tatar)

summary(path_out_annex)

}
